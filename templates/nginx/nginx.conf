user  root; # Nginx进程的用户
worker_processes  auto; # 自动根据CPU核心数设置进程数
worker_rlimit_nofile 102400; # 设置每个worker进程的最大打开文件数
timer_resolution        1000ms; # 时间精度设置为1秒（减少gettimeofday()调用）

error_log  /dev/stderr warn; # 在容器中部署，直接输出到标准错误
pid        /var/run/nginx.pid;

events {
    worker_connections  102400; # 每个worker进程最大连接数
    multi_accept on; # 允许每个worker一次性批量接收就绪的连接
    use epoll; # 使用Linux epoll I/O模型
}

http {
    ##
    # Basic Settings
    ##
    sendfile        on; # 开启高效的零拷贝文件传输
    tcp_nopush on;                    # 在sendfile模式下，等待数据包填满再发送（提升网络效率）
    tcp_nodelay on;                   # 禁用Nagle算法（降低小数据包延迟）
    types_hash_max_size 2048;         # 扩展MIME类型哈希表大小
    server_tokens off;                # 隐藏Nginx版本号（安全加固）
    keepalive_timeout  65;            # 保持连接超时时间（秒）

    include       mime.types;         # 引入MIME类型定义文件
    default_type  application/octet-stream;  # 默认Content-Type
    max_ranges 1;                     # 限制HTTP Range请求的分片数（防DDoS）
    server_names_hash_bucket_size 128; # 服务器名哈希表桶大小

    # VTS模块配置
    vhost_traffic_status_zone;
    server {
        listen 0.0.0.0:80;
        server_name localhost;
        location /status {
            vhost_traffic_status_display;
            vhost_traffic_status_display_format html;
        }
    }

    log_format json_main escape=json '{'
        # 基础信息
        '"timestamp":"$time_iso8601",'          # 标准ISO8601格式时间，如 "2025-07-16T22:35:24+08:00"
        '"server_addr":"$server_addr",'         # 服务器接收请求的IP地址（Nginx主机IP）
        '"remote_addr":"$remote_addr",'         # 客户端IP地址（可能是代理IP）
        '"host":"$host",'                       # 请求的域名（如 "example.com"）
        '"uri":"$uri",'                         # 请求的URI（如 "/api/user"），不包含查询参数
        '"request":"$request",'                 # 完整请求行（如 "GET /api/user HTTP/1.1"）
        '"request_method":"$request_method",'   # HTTP请求方法（GET/POST/PUT等）
        '"args":"$args",'                       # 查询字符串（如 "id=123&name=foo"）

        # 响应状态
        '"status":"$status",'                   # HTTP响应状态码（如 200、404、500）
        '"upstream_status":"$upstream_status",' # 后端服务返回的HTTP状态码（反向代理时有用）

        # 流量与性能
        '"body_bytes_sent":$body_bytes_sent,'   # 发送给客户端的响应体字节数（不含Header）
        '"request_length":$request_length,'     # 客户端请求的总字节数（含Header和Body）
        '"request_time":$request_time,'         # 请求处理总时间（秒，从接收到客户端第一个字节到发送完响应）
        '"upstream_response_time":$upstream_response_time,' # 后端处理请求的时间（秒，反向代理时有效）
        '"upstream_connect_time":$upstream_connect_time,' # 连接后端服务的耗时（秒）

        # 网络与代理
        '"upstream_addr":"$upstream_addr",'     # 后端服务地址（如 "10.0.0.1:8080"）
        '"http_x_forwarded_for":"$http_x_forwarded_for",' # 经过代理时的原始客户端IP链（如 "1.2.3.4, 5.6.7.8"）
        '"http_x_real_ip":"$http_x_real_ip",'   # 代理层传递的真实客户端IP（需配置）

        # 安全与加密
        '"ssl_protocol":"$ssl_protocol",'       # SSL/TLS协议版本（如 "TLSv1.3"）
        '"ssl_cipher":"$ssl_cipher",'           # 加密套件（如 "ECDHE-RSA-AES256-GCM-SHA384"）

        # 用户与来源
        '"http_referer":"$http_referer",'       # 请求来源页URL（可能为空）
        '"http_user_agent":"$http_user_agent",' # 客户端浏览器或工具标识（如 "Mozilla/5.0"）
        '"http_cookie":"$http_cookie"'         # 全部Cookie（需谨慎，可能含敏感信息）
    '}';

    access_log  /dev/stdout  json_main; # 在容器中部署，访问日志直接输出到stdout
    gzip  on; # 开启gzip压缩传输

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    proxy_cache_path /var/cache/nginx/chunked 
        levels=1:2 
        keys_zone=webdav_cache:100m
        max_size=10G
        inactive=7d
        use_temp_path=off;
    include /etc/nginx/conf.d/*.conf; # 在这里引入所有的conf文件
}